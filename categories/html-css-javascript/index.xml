<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html Css Javascript on JoeWatkins.io</title>
    <link>/categories/html-css-javascript/</link>
    <description>Recent content in Html Css Javascript on JoeWatkins.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/html-css-javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Inline Critical CSS with Wordpress</title>
      <link>/javascript/inline-critical-css-with-wordpress/</link>
      <pubDate>Sun, 05 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/javascript/inline-critical-css-with-wordpress/</guid>
      <description>

&lt;p&gt;The importance of &lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/index?hl=en&#34;&gt;web performance&lt;/a&gt; is at an all-time high now due to the proliferation of mobile devices. Google is now promoting &amp;ldquo;Mobile Friendly&amp;rdquo; websites giving them higher rank for meeting a &lt;a href=&#34;http://googlewebmastercentral.blogspot.com/2015/02/finding-more-mobile-friendly-search.html&#34;&gt;few key guidelines&lt;/a&gt;. One piece of that #webperf puzzle is the practice of inlining &lt;a href=&#34;https://css-tricks.com/authoring-critical-fold-css/&#34;&gt;Critical CSS&lt;/a&gt; (only styles needed to render the page &amp;lsquo;above-the-fold&amp;rsquo;) into the document&amp;rsquo;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; alongside calling CSS and JavaScript asynchronously. This &amp;ldquo;progressive loading&amp;rdquo; will make your website hit quicker and render faster for the user. There are a few awesome tools out there to assist with capturing these styles.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/filamentgroup/criticalCSS&#34;&gt;CriticalCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/addyosmani/critical&#34;&gt;Critical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pocketjoso/penthouse&#34;&gt;Penthouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/filamentgroup/loadCSS&#34;&gt;LoadCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a great roundup of critical-path tools: &lt;a href=&#34;https://github.com/addyosmani/critical-path-css-tools&#34;&gt;Critical Path Above-the-fold Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial assumes you have a basic understanding of &lt;a href=&#34;http://gruntjs.com/&#34;&gt;GruntJS&lt;/a&gt; and modern web development workflow tooling. Oh.. and you understand the ins and outs of a Wordpress template setup.&lt;/p&gt;

&lt;h2 id=&#34;ok-how-do-you-handle-critical-css-in-wordpress&#34;&gt;Ok.. how do you handle Critical CSS in Wordpress?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wordpress.org&#34;&gt;Wordpress&lt;/a&gt; is an awesome CMS/Blogging platform! BUTâ€¦ it currently doesn&amp;rsquo;t play well with the webperf-minded. Wordpress, out-of-the-box, can have excessive calls to CSS and JavaScript files in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the document. When you start adding plugins the list will get even longer. The less http file requests, the quicker the page will load.&lt;/p&gt;

&lt;p&gt;An important step to pull off inline Critical CSS successfully in Wordpress is to limit all of those extra http requests so our Critical CSS efforts are not lost on other files slowing down the render &lt;a href=&#34;http://www.feedthebot.com/pagespeed/critical-render-path.html&#34;&gt;due to load blocking&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;step-one-grab-critical-css&#34;&gt;Step One: Grab Critical CSS&lt;/h2&gt;

&lt;p&gt;The first thing you will want to do is grab the actual Above-the-fold styles using your preferred automated task. I use &lt;a href=&#34;https://github.com/filamentgroup/grunt-criticalcss&#34;&gt;grunt-criticalcss&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a look at a Grunt config:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var wpDefaults = {
	fullThemePath : &amp;quot;../wp-content/themes/theme-name-here&amp;quot;,
}

criticalcss: {
	home : {
		options: {
			url: &amp;quot;http://localhost:3000&amp;quot;,
			width: 1200,
			height: 900,
			output file: wpDefaults.fullThemePath+&amp;quot;/includes/critical-home.css&amp;quot;,
			filename: &amp;quot;styles/main.min.css&amp;quot;,
			buffer: 800*1024
		}
	},
	inner : {
		options: {
			url: &amp;quot;http://localhost:3000/inner-page&amp;quot;,
			width: 1200,
			height: 900,
			output file: wpDefaults.fullThemePath+&amp;quot;/includes/critical-inner.css&amp;quot;,
			filename: &amp;quot;styles/main.min.css&amp;quot;,
			buffer: 800*1024
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This Grunt task will use a headless web browser to visit a url you specify and grab all the styles needed for above-the-fold and then creates a CSS file that I will then include as a PHP include.&lt;/p&gt;

&lt;p&gt;You will notice that there are two separate tasks to cover &lt;strong&gt;Home&lt;/strong&gt; page styles as well as &lt;strong&gt;Inner&lt;/strong&gt; page styles as those may differ from project to project. From the command line I  can then invoke them like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$grunt criticalcss:home&lt;/code&gt; or &lt;code&gt;$grunt criticalcss:inner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These tasks create two separate Critical CSS stylesheets that I can then include like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;?php include(&#39;/includes/critical-home.css&#39;); ?&amp;gt;&lt;/code&gt; inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the header.php template file.&lt;/p&gt;

&lt;p&gt;It is also a good idea to minify these critical CSS files once you have them.&lt;/p&gt;

&lt;p&gt;You can elect to setup a separate Grunt task for this or have be part of your Watch tasks. It can be a bit slow so I separate them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grunt.registerTask(&#39;cssBuild&#39;,[&#39;criticalcss&#39;,&#39;cssmin&#39;]);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-two-install-async-js-and-css-plugin&#34;&gt;Step Two: Install Async JS and CSS Plugin&lt;/h2&gt;

&lt;p&gt;A great plugin for Critical CSS loading in Wordpress is called &lt;a href=&#34;https://wordpress.org/plugins/async-js-and-css/&#34;&gt;Async JS and CSS&lt;/a&gt;. It is important to note that the plugin can affect only those files loaded using Worpdress&amp;rsquo;s queue, which most do.&lt;/p&gt;

&lt;p&gt;This plugin will take all the site&amp;rsquo;s required CSS and Javascript files and load them asynchronously. This means the plugin removes all of the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags from the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and then calls those files with JavaScript in the foot of the document. For &lt;a href=&#34;https://www.gov.uk/service-manual/making-software/progressive-enhancement.html&#34;&gt;Progressive Enhancement&lt;/a&gt; reasons you can offer fallback &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; solutions along side this solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is how you install the plugin:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Upload &lt;code&gt;asyncJSandCSS&lt;/code&gt; folder to the &lt;code&gt;/wp-content/plugins/&lt;/code&gt; directory&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Activate the plugin through the &amp;lsquo;Plugins&amp;rsquo; menu in WordPress&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the plugin if needed (Settings/Async Settings)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;/images/wp-plugin-shot.png&#34; alt=&#34;Plugin settings&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-four-optional-setup-dev-mode-in-your-template&#34;&gt;Step Four (Optional): Setup Dev Mode in your template&lt;/h2&gt;

&lt;p&gt;I like to setup a &lt;strong&gt;Dev&lt;/strong&gt; state so that while I&amp;rsquo;m developing I&amp;rsquo;m not wrestling the inline styles as they will take precedence over files called via HTTP and make debugging tougher. While in &lt;strong&gt;Dev&lt;/strong&gt; mode I actually call files the old fashioned way using hardcoded &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags and then turn this mode off prior to building and pushing out to staging or production.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;?php
	$dev_mode = false;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-five-setup-your-head-with-loadcss-and-php-includes&#34;&gt;Step Five: Setup your &lt;head&gt; with loadCSS and PHP Includes&lt;/h2&gt;

&lt;p&gt;Now we are going to make sure that we are calling our main site styles asynchronously by using &lt;a href=&#34;https://github.com/filamentgroup/loadCSS&#34;&gt;LoadCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is super simple to setup you just include the loadCSS() function in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and point it to your main styles file.&lt;/p&gt;

&lt;h3 id=&#34;header-php-file&#34;&gt;header.php file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;?php
	if(!$dev_mode){
?&amp;gt;
&amp;lt;script&amp;gt;
	// load CSS async
	function loadCSS(e,t,n){&amp;quot;use strict&amp;quot;;function o(){var t;for(var i=0;i&amp;lt;s.length;i++){if(s[i].href&amp;amp;&amp;amp;s[i].href.indexOf(e)&amp;gt;-1){t=true}}if(t){r.media=n||&amp;quot;all&amp;quot;}else{setTimeout(o)}}var r=window.document.createElement(&amp;quot;link&amp;quot;);var i=t||window.document.getElementsByTagName(&amp;quot;script&amp;quot;)[0];var s=window.document.styleSheets;r.rel=&amp;quot;stylesheet&amp;quot;;r.href=e;r.media=&amp;quot;only x&amp;quot;;i.parentNode.insertBefore(r,i);o();return r}

	loadCSS( &amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/styles/main.min.css&amp;quot; );
&amp;lt;/script&amp;gt;

&amp;lt;!-- no js support --&amp;gt;
&amp;lt;noscript&amp;gt;
	&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/styles/main.min.css&amp;quot;&amp;gt;
&amp;lt;/noscript&amp;gt;

&amp;lt;!-- Critical CSS includes --&amp;gt;
&amp;lt;style&amp;gt;
&amp;lt;?php
	if(is_front_page()){
		include (TEMPLATEPATH . &#39;/includes/critical-home.min.css&#39; );
	}else{
		include (TEMPLATEPATH . &#39;/includes/critical-inner.min.css&#39; );
	}
?&amp;gt;
&amp;lt;/style&amp;gt;

&amp;lt;?php }else{ ?&amp;gt;

	&amp;lt;!-- dev mode call standard styles --&amp;gt;
	&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/styles/main.min.css&amp;quot;&amp;gt;

&amp;lt;?php } ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this setup if &lt;code&gt;$dev_mode == false&lt;/code&gt; then styles will be loaded asynchronously otherwise styles will be loaded using &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag. I find this to be a better for debugging so that I&amp;rsquo;m not fighting the inlined styles when working.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m ready to push my changes I do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch &lt;code&gt;$dev_mode&lt;/code&gt; from &lt;code&gt;true&lt;/code&gt; back to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build my new Critical CSS&lt;/li&gt;
&lt;li&gt;Then push changes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;old-ie-support&#34;&gt;Old IE Support&lt;/h2&gt;

&lt;p&gt;I noticed some odd behavior with IE8-9 with this method of loading Critical CSS. I found that creatively using conditionals for those browsers did the trick to simply have those browsers load the CSS from the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags. Something like this:&lt;/p&gt;

&lt;h3 id=&#34;modern-browsers-and-ie10&#34;&gt;Modern browsers and IE10+&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--[if !IE]&amp;gt; --&amp;gt;
	function loadCSS(e,t,n){..}
	loadCSS( &amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/styles/main.min.css&amp;quot; );
&amp;lt;!-- &amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ie9&#34;&gt;IE9&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--[if IE 9]&amp;gt;
	&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/styles/main.min.css&amp;quot;&amp;gt;
&amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ie8-and-below&#34;&gt;IE8 and below&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--[if lt IE 9]&amp;gt;
	&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/styles/main.min.css&amp;quot;&amp;gt;
	&amp;lt;script src=&amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/js/vendor/html5shiv.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&amp;quot;&amp;lt;?php bloginfo(&#39;template_url&#39;); ?&amp;gt;/js/vendor/respond.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a website we (&lt;a href=&#34;http://emergeinteractive.com&#34;&gt;Emerge Interactive&lt;/a&gt;) shipped using this exact technique. Visit &lt;a href=&#34;http://www.webuildgreencities.com/&#34;&gt;We Build Green Cities&lt;/a&gt; to see it in action.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organize your jQuery with Object Literal Notation</title>
      <link>/javascript/organize-your-jquery-with-object-literal-notation/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/javascript/organize-your-jquery-with-object-literal-notation/</guid>
      <description>

&lt;p&gt;A few years back I learned of a great way to organize JavaScript using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&#34;&gt;Object Literal Notation&lt;/a&gt;. I use this method daily to keep my jQuery driven projects organized and easier to maintain.&lt;/p&gt;

&lt;p&gt;First we need to wrap our heads around this truth about JavaScript:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Almost everything in JavaScript is an object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;what-are-some-benefits-of-using-object-literals&#34;&gt;What are some benefits of using Object Literals?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Makes our JavaScript easier to read&lt;/li&gt;
&lt;li&gt;Makes our JavaScript easier to debug&lt;/li&gt;
&lt;li&gt;Way less merge conflicts in Version Control&lt;/li&gt;
&lt;li&gt;We can find code blocks quicker&lt;/li&gt;
&lt;li&gt;Makes our code more portable&lt;/li&gt;
&lt;li&gt;Plays nicely with minification&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ladies-and-gentlemen-start-your-engines&#34;&gt;Ladies and Gentlemen start your Engines&lt;/h2&gt;

&lt;p&gt;To start things off we will setup the &lt;code&gt;Engine&lt;/code&gt; object inside of the &lt;a href=&#34;https://api.jquery.com/ready/&#34;&gt;jQuery ready method&lt;/a&gt;. I like to throw a comment at the end of each object. As we add objects this can help keep track of where you are in the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(document).ready(function(){

	var Engine = {

	}; // Engine

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creatively-naming-your-objects-helps-with-organization&#34;&gt;Creatively naming your objects helps with organization&lt;/h2&gt;

&lt;p&gt;I like to stick with a naming convention that makes sense to me when I&amp;rsquo;m creating new objects and functions. Let&amp;rsquo;s add a &lt;code&gt;ui&lt;/code&gt; property that will house our first few methods inside of the &lt;code&gt;Engine&lt;/code&gt; object. Spend some time thinking about naming here so when revisiting the code things make sense. These properties should be comma separated should you add more.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(document).ready(function(){

	var Engine = {

		ui : {

		} // ui

	}; // Engine

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I will add a method as a property of the &lt;code&gt;ui&lt;/code&gt; object named &lt;code&gt;helloWorld&lt;/code&gt;. This is my handy-dandy function I will later call using dot notation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(document).ready(function(){

	var Engine = {

		ui : {

			helloWorld : function(){
				alert(&amp;quot;Hello World&amp;quot;);
			} // helloWorld

		} // ui

	}; // Engine

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-trigger-your-functions&#34;&gt;How to trigger your functions&lt;/h2&gt;

&lt;p&gt;Now that we have created our app&amp;rsquo;s scaffolding and our &lt;code&gt;helloWorld&lt;/code&gt; function is in place we can trigger it by simply using dot notation. e.g. &lt;code&gt;Engine.ui.helloWorld();&lt;/code&gt; Be sure to do this inside of the jQuery ready method so it fires when the document is ready.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(document).ready(function(){

	var Engine = {

		ui : {

			helloWorld : function(){
				alert(&amp;quot;Hello World&amp;quot;);
			} // helloWorld

		} // ui

	}; // Engine

	Engine.ui.helloWorld();

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multiple-functions-with-variables&#34;&gt;Multiple functions with variables&lt;/h2&gt;

&lt;p&gt;Now we are ready to start rocking by adding more functions. Be sure to remember that these are objects and should be comma separated. These objects can be passed variables as well. Don&amp;rsquo;t forget to add your comments to each function as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;$(document).ready(function(){

	var Engine = {

		ui : {

			helloWorld : function(){
				alert(&amp;quot;Hello World&amp;quot;);
			}, // helloWorld

			alertFun : function(phrase){
				/*
				I can even add comments here as well
				explaining what the heck this thing does
				*/
				alert(phrase);
			}, // alertFun

		} // ui

	}; // Engine

	Engine.ui.helloWorld();
	Engine.ui.alertFun(&amp;quot;I like cats&amp;quot;);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s basically it! Now you can quickly handle the order of when things are fired in your app, quickly turn on and off functions by simply commenting/uncommenting each function&amp;rsquo;s dot notation trigger, and sleep better knowing your doing your best to stay away from ol&amp;rsquo; jQuery Spaghetti code that can be common with larger code bases.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Visual Regression Testing with Grunt-BackstopJS</title>
      <link>/css-visual-regression-testing-with-grunt-backstopjs/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>/css-visual-regression-testing-with-grunt-backstopjs/</guid>
      <description>

&lt;p&gt;These days as a front-end web developer you can find yourself drowning in new tools to try out.  You can spend hours on end trying to keep up with all of these new tools to add to your workflow.  I find myself down this rabbit hole quite often. (I secretly like it)&lt;/p&gt;

&lt;p&gt;##CSS Visual Regression
CSS visual regression testing is the process of running automated visual test comparisons on pages or elements in your projects. Generally these tests utilize tools consisting of &lt;a href=&#34;https://github.com/Huddle/PhantomCSS&#34;&gt;PhantomCSS&lt;/a&gt;, &lt;a href=&#34;http://casperjs.org/&#34;&gt;CasperJS&lt;/a&gt;, and &lt;a href=&#34;http://huddle.github.io/Resemble.js/&#34;&gt;Resemble.js&lt;/a&gt;. These tools can literally visit specified web pages, take snapshots at different screen sizes and then compare those images to each other. These comparisons can uncover bugs youâ€™d otherwise not learn about until itâ€™s too late.&lt;/p&gt;

&lt;p&gt;After being introduced to CSS visual regression testing by my colleague &lt;a href=&#34;http://blog.greggant.com/&#34;&gt;Greg&lt;/a&gt;, I took on the challenge of integrating a testing system into our teamâ€™s workflow.&lt;/p&gt;

&lt;p&gt;Iâ€™ve tested a few CSS regression tools out there and my favorite has been &lt;a href=&#34;https://garris.github.io/BackstopJS/&#34;&gt;BackstopJS&lt;/a&gt;. This tool is fairly easy to configure which allows for you to get up and rolling quickly. Backstop.js loads your tests in a fancy webpage that gives you the visual feedback needed for targeting bugs caused from CSS related issues. There are some &lt;a href=&#34;https://css-tricks.com/automating-css-regression-testing/&#34;&gt;other great posts&lt;/a&gt; out there on BackstopJS to get you &lt;a href=&#34;http://davidwalsh.name/visual-regression-testing-angular-applications&#34;&gt;familiar with the workflow&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-css-regression-workflow&#34;&gt;Basic CSS Regression Workflow&lt;/h2&gt;

&lt;p&gt;From a high level CSS visual regression testing consists of a few simple steps in your workflow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create reference files/images to test against. &lt;a href=&#34;http://styleguides.io/examples.html&#34;&gt;Style Guides&lt;/a&gt; make for awesome testing grounds.&lt;/li&gt;
&lt;li&gt;Make normal changes to your projectâ€™s CSS.&lt;/li&gt;
&lt;li&gt;Run CSS visual regression test.&lt;/li&gt;
&lt;li&gt;If the tests fail you will see what is broken in results to fix.&lt;/li&gt;
&lt;li&gt;Fix issues, pass the test, and then deploy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-one-required-packages&#34;&gt;Step One - Required Packages&lt;/h2&gt;

&lt;p&gt;Be sure to have &lt;a href=&#34;https://nodejs.org/download/&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt;, &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;, and &lt;a href=&#34;http://bower.io/&#34;&gt;Bower Package Manager&lt;/a&gt; setup before moving forward. This tooling actually uses both Grunt and Gulp so you will need them both :)&lt;/p&gt;

&lt;p&gt;Start things off by installing &lt;a href=&#34;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=phantomjs&#34;&gt;PhatomJS&lt;/a&gt; and &lt;a href=&#34;http://casperjs.org/&#34;&gt;Capser.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo npm install -g phantomjs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo npm install -g casperjs&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-two&#34;&gt;Step Two&lt;/h2&gt;

&lt;p&gt;Create a project folder and setup a Bower config file in the root. &lt;code&gt;bower init&lt;/code&gt; Now you will install Backstop.js using Bower.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ bower install --save-dev backstopjs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will install Backstop.js inside the /bower_components/ folder.&lt;/p&gt;

&lt;h2 id=&#34;step-three-grunt-backstopjs&#34;&gt;Step Three - grunt-backstopjs&lt;/h2&gt;

&lt;p&gt;This is where we will deviate from other &lt;a href=&#34;https://css-tricks.com/automating-css-regression-testing/&#34;&gt;BackstopJS tutorials&lt;/a&gt; out there and we will setup &lt;a href=&#34;https://github.com/ddluc/grunt-backstop&#34;&gt;grunt-backstop&lt;/a&gt;. This awesome grunt plugin makes using BackstopJS a cinch.&lt;/p&gt;

&lt;p&gt;I challenged my colleague &lt;a href=&#34;http://ddluc.com/&#34;&gt;Dan&lt;/a&gt; at the office, who is comfortable in Node.js, to author the plugin. Together we came up with a solution that we use today on projects. While the plugin is still in its infancy its super easy to setup. BackstopJS, in itâ€™s current state, forces you to work within the /bower_components/ folder. This conflicted with our teamâ€™s workflow as we do not check that folder into our version control. We needed to work outside of that folder. &lt;a href=&#34;https://github.com/garris/BackstopJS/issues/41&#34;&gt;Hereâ€™s the issue&lt;/a&gt; that started it all :)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npm install grunt-backstop --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the plugin has been installed to the /node_modules/ folder add the task to your Gruntfile.js&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grunt.loadNpmTasks(â€˜grunt-backstopâ€™);&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;basic-configuration&#34;&gt;Basic Configuration&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;backstop: {
		your_target: {
			options: {
				backstop_path: â€˜./bower_components/backstopjsâ€™,
				test_path: â€˜./testsâ€™,
				setup: true,
				configure: true,
				create_references: true,
				run_tests: true
			}
		},
	},
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;advanced-configuration&#34;&gt;Advanced Configuration&lt;/h3&gt;

&lt;p&gt;Because the standard workflow for BackstopJS is a series of steps to setup I like to break up my Grunt config so that I can have each of these commands at my disposal. e.g. Setup, Create reference files, Run test etc. It is a bit verbose but gives you more control:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;backstop: {
	setup: {
		options : {
			backstop_path: â€˜./bower_components/backstopjsâ€™,
			test_path: â€˜./testsâ€™,
			setup: false,
			configure: true
		}
	},
	test: {
		options : {
			backstop_path: â€˜./bower_components/backstopjsâ€™,
			test_path: â€˜./testsâ€™,
			create_references: false,
			run_tests: true
		}
	},
	reference: {
		options : {
			backstop_path: â€˜./bower_components/backstopjsâ€™,
			test_path: â€˜./testsâ€™,
			create_references: true,
			run_tests: false
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-four&#34;&gt;Step Four&lt;/h2&gt;

&lt;p&gt;Once you have your Gruntfile setup you will run the BackstopJS setup. This will trigger BackstopJSâ€™s usual setup.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ grunt backstop:setup&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-five&#34;&gt;Step Five&lt;/h2&gt;

&lt;p&gt;Now if you donâ€™t already have a backstop.json file in your project root letâ€™s create one. We will do this manually. From the project root use these commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd bower_components/backstopjs/&lt;/code&gt; then &lt;code&gt;$ gulp genConfig&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will place a &lt;code&gt;backstop.json&lt;/code&gt; file in your project root. It has all the settings for screen sizes, target testing urls, and components to test. The default file that BackstopJS creates should work for a quick test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/backstop-json.png&#34; alt=&#34;Backstop.json example&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-six&#34;&gt;Step Six&lt;/h2&gt;

&lt;p&gt;Everything should be good to go for us to create our first reference files. We will use the default configuration in the generated backstop.json file. This reaches out to Bootstrapâ€™s site and check a couple components. From the project root run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ grunt backstop:reference&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a bunch of reference .png files and place them in the /tests folder. These are the images the tests will compare against. When you create new components to test you will update the backstop.json file and then run the reference command again and it will add the new component to the reference files.&lt;/p&gt;

&lt;h2 id=&#34;step-seven&#34;&gt;Step Seven&lt;/h2&gt;

&lt;p&gt;Finally we are ready for our first test! Now from the project root run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ grunt backstopjs:test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A web browser will open up and give you your test results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/test-results.png&#34; alt=&#34;Test results&#34;&gt;&lt;br&gt;
&lt;img src=&#34;/images/visual-feedback.png&#34; alt=&#34;Visual Feedback&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;wrapping-it-up&#34;&gt;Wrapping it up&lt;/h2&gt;

&lt;p&gt;So now you are setup for Visual Regression Testing. You can configure the &lt;code&gt;backstop.json&lt;/code&gt; file to work with your project either locally or remotely. I highly suggest testing a style guide or component library as part of your deployment strategy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have created a &lt;a href=&#34;https://github.com/joe-watkins/grunt-backstopjs-demo&#34;&gt;Github repo with demo files&lt;/a&gt; if youâ€™d like to see this in action.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>