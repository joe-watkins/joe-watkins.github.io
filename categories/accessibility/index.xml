<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Accessibility on JoeWatkins.io</title>
    <link>/categories/accessibility/</link>
    <description>Recent content in Accessibility on JoeWatkins.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jun 2016 08:28:24 -0700</lastBuildDate>
    <atom:link href="/categories/accessibility/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Up and Running with JAWS on a MAC</title>
      <link>/accessibility/up-and-running-with-jaws-on-a-mac/</link>
      <pubDate>Sat, 25 Jun 2016 08:28:24 -0700</pubDate>
      
      <guid>/accessibility/up-and-running-with-jaws-on-a-mac/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.freedomscientific.com/Downloads/JAWS&#34;&gt;JAWS&lt;/a&gt; is one of the more popular assistive technologies used by people with disabilities. Since the application is a Windows-based application it can be a little tough to use on a Mac. Learn how you can install it on your Mac for use or accessibility testing.&lt;/p&gt;

&lt;p&gt;Here are the bits of software needed to accomplish this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A virtual machine application such as &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; (free), &lt;a href=&#34;https://www.vmware.com/products/fusion&#34;&gt;VMware Fusion&lt;/a&gt;, or &lt;a href=&#34;https://support.apple.com/en-us/HT201468&#34;&gt;Bootcamp&lt;/a&gt; should work as well. This is how you can run Windows on your Mac.&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&#34;&gt;Windows Virtual Machine&lt;/a&gt; from Microsoft. Windows 7 Worked for me. This is an actual copy of Windows that you will install on your virtual machine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.freedomscientific.com/Downloads/JAWS&#34;&gt;JAWS&lt;/a&gt; Screen Reading Software.&lt;/li&gt;
&lt;li&gt;A keymapper application such as &lt;a href=&#34;https://sharpkeys.codeplex.com/&#34;&gt;SharpKeys&lt;/a&gt;. We will use this to &amp;ldquo;remap&amp;rdquo; a keyboard key that JAWS uses that isn&amp;rsquo;t on most Macs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-set-up-your-virtual-machine&#34;&gt;1. Set up your Virtual Machine&lt;/h2&gt;

&lt;p&gt;Follow directions on how to set up the Virtual Machine software on your Mac and how to install Windows within it. &lt;a href=&#34;https://www.virtualbox.org/manual/ch01.html#gui-createvm&#34;&gt;VirtualBox&lt;/a&gt; makes this fairly simple.&lt;/p&gt;

&lt;h2 id=&#34;2-download-amp-install-jaws-it-s-free&#34;&gt;2. Download &amp;amp; Install JAWS &amp;ndash; It&amp;rsquo;s FREE!!&lt;/h2&gt;

&lt;p&gt;JAWS (Job Access With Speech) is a very powerful application and is fairly expensive for use but you can use the application for &lt;strong&gt;40 minutes at a time for free&lt;/strong&gt;. This model works great for accessibility testing. From the Windows virtual machine visit the &lt;a href=&#34;http://www.freedomscientific.com/Downloads/JAWS&#34;&gt;JAWS download page&lt;/a&gt; and download the appropriate version and then follow the setup instructions for installation.&lt;/p&gt;

&lt;h2 id=&#34;3-set-up-keymapping-for-the-insert-key&#34;&gt;3. Set up keymapping for the INSERT key&lt;/h2&gt;

&lt;p&gt;JAWS leans on the Insert key for some &lt;a href=&#34;http://webaim.org/resources/shortcuts/jaws&#34;&gt;keyboard commands&lt;/a&gt;. On a standard mac laptop keyboard you&amp;rsquo;ll find this key is missing and makes using JAWS very tough. One quick way around this is to map a key we will not more than likely use to the registry on the Windows machine for the insert key.&lt;/p&gt;

&lt;p&gt;On the Windows virtual machine &lt;a href=&#34;https://sharpkeys.codeplex.com/&#34;&gt;download and install SharpKeys&lt;/a&gt;. Once it loads you can map a key (I chose the right command key) to the Insert key. The video below demonstrates mapping the Right Command key to the Insert key on the Windows virtual machine:&lt;/p&gt;

&lt;!-- copy and paste. Modify height and width if desired. --&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom:30px;&#34;&gt;
&lt;video src=&#34;/images/sharpkeys-demo.mp4&#34; controls aria-label=&#34;Video demonstration of remapping a key in virtual environment&#34;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;After rebooting the virtual machine start up JAWS and you should now be able to perform the commands that require the Insert key.&lt;/p&gt;

&lt;h2 id=&#34;4-f1-f2-etc-as-standard-function-keys&#34;&gt;4. F1,F2, etc. as standard function keys&lt;/h2&gt;

&lt;p&gt;JAWS uses standard function keys e.g. F1,F2,F3 etc. On your Mac visit:&lt;/p&gt;

&lt;p&gt;System Preferences -&amp;gt; Keyboard&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://content.screencast.com/users/joe-watkins-emerge/folders/Snagit/media/15c1eaf3-8148-4a6d-ac3f-d2c5d617e639/2016-06-25_20-33-44.png&#34; style=&#34;max-width: 600px;&#34; alt=&#34;screenshot of system preferences keyboard settings&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-start-jaws&#34;&gt;5. Start JAWS&lt;/h2&gt;

&lt;p&gt;After you completed the above steps start up your virtual environment and launch JAWS. A good test to make sure things are working correctly would be to open a web browser on the virtual machine with JAWS running, visit a web page and then hit &lt;code&gt;modifier key + F6&lt;/code&gt; (in my case the Right Command key) This will pull of the browse by headings tool. If this wasn&amp;rsquo;t setup correctly it would open the start menu.&lt;/p&gt;

&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34; style=&#34;margin-bottom:30px;&#34;&gt;
&lt;video src=&#34;/images/running-jaws-mac.mp4&#34; controls aria-label=&#34;Video demonstration of using JAWS on MAC&#34;&gt;&lt;/video&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Infographics may not belong on the web</title>
      <link>/accessibility/infographics-may-not-belong-on-the-web/</link>
      <pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/accessibility/infographics-may-not-belong-on-the-web/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/images/infocrapic.jpg&#34; alt=&#34;Infographic image search result&#34; class=&#34;img-responsive&#34;&gt;&lt;/p&gt;

&lt;p&gt;The web is one of the only media outlets that we currently have at our disposal that, out-of-the-box, inherently comes without discrimination of its end user. While it is true, you may need a computer and a connection to the internet to leverage its superpowers, the very nature of the web is inviting to all.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://info.cern.ch/hypertext/WWW/TheProject.html&#34;&gt;first website ever created&lt;/a&gt; by Tim Berners-Lee defines the web:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The WorldWideWeb (W3) is a wide-area hypermedia information retrieval initiative aiming to give universal access to a large universe of documents.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Infographic&#34;&gt;Infographics&lt;/a&gt; are defined as graphic visual representations of information. This form of representing information dates back to the 1600’s, or even as early as cave drawings, but that does not give it an automatic place on the web.&lt;/p&gt;

&lt;p&gt;There are many fixed/print-centric concepts that do not fit in well with the web. Responsive Web Design has done a great job of helping us shed these antiquated methods of delivering stories.&lt;/p&gt;

&lt;h2 id=&#34;why-infographics-may-not-be-the-best-mechanism-for-delivering-a-story-on-the-web&#34;&gt;Why infographics may not be the best mechanism for delivering a story on the web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If done incorrectly, and most are, only people with vision can consume the content.&lt;/li&gt;
&lt;li&gt;Search Engines may not be able to consume the visual content in the infographic and may not index its content.&lt;/li&gt;
&lt;li&gt;Flattened image-based infographics may only cater to people that speak or understand that language.&lt;/li&gt;
&lt;li&gt;Generally, the content in the image-based infographic is not accessible or auto-translatable.&lt;/li&gt;
&lt;li&gt;Infographics usually require context. Smaller viewports may only allow for portions of an infographic to be visible at a time, thus removing context from the user which may lead to confusion.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Assistive_technology&#34;&gt;Assistive technology&lt;/a&gt; may not be able to consume the information and present it to some users.&lt;/li&gt;
&lt;li&gt;File Size: Not everyone on the planet has a broadband connection and a shiny new Macbook Pro. Large file sizes from infographics can be &lt;a href=&#34;https://whatdoesmysitecost.com/test/160330_HF_6385b9c5f428ad4ac508367d930406e2&#34;&gt;costly for users to download&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;An overload of &lt;a href=&#34;https://www.google.com/search?q=bad+infographics&amp;amp;espv=2&amp;amp;biw=1405&amp;amp;bih=728&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwjOtqXw4ejLAhVG32MKHUjPDocQ_AUIBigB#imgrc=_&#34;&gt;visual clutter&lt;/a&gt; in infographics can be disorienting to many users.&lt;/li&gt;
&lt;li&gt;It can be very difficult, and may require multiple versions of the infographic, to work across multiple screen sizes. Native &lt;a href=&#34;http://caniuse.com/#search=srcset&#34;&gt;browser support is limited&lt;/a&gt; for responsive images.&lt;/li&gt;
&lt;li&gt;Making updates or changes to image-based infographics can be time consuming and costly which introduces maintainability issues.&lt;/li&gt;
&lt;li&gt;Scoping costs for infographics can be difficult due to unknown design costs as well as development implementation costs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-responsibly-do-infographics-on-the-web&#34;&gt;How to responsibly do infographics on the web&lt;/h2&gt;

&lt;p&gt;If you or your client is hellbent on having infographics be present in your web-based experience I have some suggestions on how you can make these enjoyable to a wider audience. It should be understood that these suggestions could add complexity and time to your project but are worth the extra effort.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be sure to include supporting HTML-based text that accompanies the image-based infographic. A paragraph or two setting up the visualization.&lt;/li&gt;
&lt;li&gt;Use alternative text by leveraging the &lt;a href=&#34;http://webaim.org/techniques/alttext/&#34;&gt;alt attribute&lt;/a&gt; when using the infographic as an image.&lt;/li&gt;
&lt;li&gt;Consider using only HTML or &lt;a href=&#34;https://css-tricks.com/using-svg/&#34;&gt;inline SVG&lt;/a&gt; for the infographic. (*Red alert, this may take a long time and be costly)&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&#34;&gt;Aria attributes&lt;/a&gt; to make your infographics more accessible.&lt;/li&gt;
&lt;li&gt;Provide &lt;a href=&#34;https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/&#34;&gt;visually hidden&lt;/a&gt; HTML-based text copy that describes the visual content in the infographic. Using Aria attributes you can connect this chunk of content to the infographic. e.g. &lt;code&gt;aria-labelledby&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make wise color choices in your design. Color blindness if very common…1 in 12 men are color blind.&lt;/li&gt;
&lt;li&gt;Step back from the content in the visualization and ask yourself if anyone could understand the content without being close to it.&lt;/li&gt;
&lt;li&gt;Ask yourself how the infographic will scale across all screen sizes.&lt;/li&gt;
&lt;li&gt;Make sure the CMS supports all of the above for you or your client. e.g. Alternative text fields,rich text editors for visually hidden content, and responsive image solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, the ol’ mishmash of graphical bits of information may not be the best mechanism for telling your story. Leveraging technologies of the web in tandem with consideration of the fact that not all your users are like you, could lead to a more inclusive experience and your story could reach more people.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Top People to Follow in Web Accessibility</title>
      <link>/accessibility/top-people-to-follow-in-web-accessibility/</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/accessibility/top-people-to-follow-in-web-accessibility/</guid>
      <description>&lt;p&gt;The web accessibility community leans on Twitter greatly so it is an awesome way to keep up-to-date and learn from leaders in the industry.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve put together a list of &lt;a href=&#34;https://github.com/joe-watkins/top-people-to-follow-in-web-accessibility&#34;&gt;The Top People to follow in Web Accessibility&lt;/a&gt; that I feel you should follow if you are interested in web accessibility. It is an open source project so feel free to contribute names to the list.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Commonly abused HTML &amp; CSS that hurt accessibility</title>
      <link>/accessibility/commonly-abused-html-and-css-that-hurt-accessibility/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/accessibility/commonly-abused-html-and-css-that-hurt-accessibility/</guid>
      <description>

&lt;p&gt;After performing many website accessibility audits for clients, I find myself continually running into the same &lt;em&gt;key offenders&lt;/em&gt; that cause inaccessibility. I thought it would be fun to gather up these few buggers and show them to you and offer up some solutions for each.&lt;/p&gt;

&lt;h2 id=&#34;1-css-outline-none&#34;&gt;1. CSS outline: none;&lt;/h2&gt;

&lt;p&gt;The CSS &lt;code&gt;outline&lt;/code&gt; property is one that designers and developers often abuse in hopes to remove the unwanted &lt;a href=&#34;http://tjvantoll.com/2013/01/28/stop-messing-with-the-browsers-default-focus-outline/&#34;&gt;focus rings&lt;/a&gt; If &lt;code&gt;outline: none;&lt;/code&gt; is used without offering a custom &lt;code&gt;:focus&lt;/code&gt; state it can make it difficult for some users to navigate around the website. Some keyboard-only users tab around the interface. If there is no &lt;code&gt;:focus&lt;/code&gt; state giving visual feedback to where the user is in the document it is easy for that user to be confused or lost. They will get frustrated and simply leave your website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;
If you remove the outline back it up with a creative &lt;code&gt;:focus&lt;/code&gt; state. Use this as an opportunity to take control of the look and feel of the &lt;code&gt;:focus&lt;/code&gt; state by using CSS &lt;code&gt;borders&lt;/code&gt;, &lt;code&gt;backgrounds&lt;/code&gt;, and even &lt;code&gt;text color&lt;/code&gt;. Try and build this into your design phase. Much like &lt;code&gt;:hover&lt;/code&gt; states are defined in design &lt;code&gt;:focus&lt;/code&gt; states can be as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gov.uk/&#34;&gt;UK.gov&lt;/a&gt; does a wonderful job handling focus state creatively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/uk-gov.gif&#34; alt=&#34;UK.gov website&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;using-outline&#34;&gt;Using &lt;code&gt;outline&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;a:focus {
	outline: 2px solid red;
	background: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;removing-outline-with-fallback&#34;&gt;Removing &lt;code&gt;outline&lt;/code&gt; with fallback&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;a:focus {
	outline: none;
	border: 2px solid red;
	background: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-html5-placeholder-attribute&#34;&gt;2. HTML5 Placeholder Attribute&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve &lt;a href=&#34;/accessibility/please-stop-using-placeholders-as-labels/&#34;&gt;written about misusing HTML5 placeholder attributes&lt;/a&gt; before and would love to see that attribute deprecated. I&amp;rsquo;ve even &lt;a href=&#34;https://code.google.com/p/chromium/issues/detail?id=397260&amp;amp;q=placeholder%20accessibility&amp;amp;colspec=ID%20Pri%20M%20Week%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified&#34;&gt;submitted bugs to Google Chrome&lt;/a&gt; regarding how the default contrast ratio of the &lt;code&gt;placeholder&lt;/code&gt; text fails WCAG 2.0 contrast ratio tests. Google claims the placeholder is &amp;ldquo;deliberately intended to be hard to see&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The goal is to &lt;strong&gt;NOT&lt;/strong&gt; use &lt;code&gt;placeholder&lt;/code&gt; as a substitute for the &lt;code&gt;label&lt;/code&gt; tag. This is common because the &lt;code&gt;placeholder&lt;/code&gt; value will autohide when the user focuses on the field. It is very common for a developer to leverage this out-of-the-box functionality for infield labels.&lt;/p&gt;

&lt;p&gt;Some assistive technology does not even recognize, or speak aloud, the value in the placeholder attribute so it should not be used as a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;
Use the placeholder attribute on forms wisely and sparingly. Remember that not all assistive technology recognizes the attribute. This is text that should coach the user for the input field only.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form role=&amp;quot;form&amp;quot;&amp;gt;
	&amp;lt;p class=&amp;quot;text-input&amp;quot;&amp;gt;
		&amp;lt;label for=&amp;quot;email-address&amp;quot;&amp;gt;Email Address&amp;lt;/label&amp;gt;
		&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;email-address&amp;quot; id=&amp;quot;email-address&amp;quot; placeholder=&amp;quot;enter your email address&amp;quot; /&amp;gt; &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
	&amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-missing-lt-label-gt-tags&#34;&gt;3. Missing &amp;lt;label&amp;gt; tags&lt;/h2&gt;

&lt;p&gt;When authoring web forms remember to include the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag for each input field. It is important to remember to tie that &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; to a particular field by adding the &lt;code&gt;for&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;
Below is a good example of a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag. Notice the ID of the input field matches the &lt;code&gt;for&lt;/code&gt; attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;label for=&amp;quot;first-name&amp;quot;&amp;gt;First Name&amp;lt;/label&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;first-name&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Grunt Tenon Client</title>
      <link>/accessibility/getting-started-with-grunt-tenon-client/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/accessibility/getting-started-with-grunt-tenon-client/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/WAI/intro/accessibility.php&#34;&gt;Web Accessibility&lt;/a&gt; / A11Y is finally on a path of owning more mindshare in the web development community.  It has a long way to go but will get there eventually when we learn more about all the positive side effects gained from injecting basic web accessibility practices into our workflow.&lt;/p&gt;

&lt;p&gt;Learning about web accessibility can be a daunting task, which probably why it is taking so long to become automatic for developers to include in their code. A11Y is not hard to learn, but resources are scattered and not very fun to soak up. There are, however, tools popping up to make this easier which is great for you and A11Y.&lt;/p&gt;

&lt;p&gt;Ideally web accessibility should be considered in every phase of a project: Discovery, Content Planning, IA, Design, Prototyping, Development, QA and beyond. In this post we are going to focus on the workflow/tooling development phase.&lt;/p&gt;

&lt;h2 id=&#34;introducing-tenon-io&#34;&gt;Introducing Tenon.io&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Tenon is a one of a kind accessibility testing tool in that it is aimed at offering unprecedented flexibility in tooling for designers developers testers and content authors&amp;rdquo; - tenon.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tenon.io/&#34;&gt;Tenon.io&lt;/a&gt; is a totally awesome web accessibility testing platform that you must check out! It is headed by web accessibility specialist &lt;a href=&#34;http://www.karlgroves.com/&#34;&gt;Karl Groves&lt;/a&gt;. You can visit &lt;a href=&#34;http://www.tenon.io/&#34;&gt;Tenon.io&lt;/a&gt; and plunk in a url to perfom robust web accessibility tests in your web browser. While this project is in its early phases (beta currently at the time of this post), it will only get better and I&amp;rsquo;m very excited about its potential.&lt;/p&gt;

&lt;p&gt;Tenon.io has opened up their API up to the public and have created Grunt/Gulp tasks for everyone to use&amp;hellip; lets see how we can do it!&lt;/p&gt;

&lt;h2 id=&#34;grunt-tenon-client&#34;&gt;Grunt-Tenon-Client&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/grunt-tenon-client&#34;&gt;Grunt Tenon Client&lt;/a&gt; is a Grunt Plugin for the Tenon Accessibility Testing API. While Tenon.io makes it super simple to test websites using their web services, there is a way to take advantage of their great API using a Grunt plugin. There is also a &lt;a href=&#34;https://github.com/egauci/gulp-tenon-client&#34;&gt;Gulp version&lt;/a&gt; of this. I am going to walk through the basic setup of this Grunt plugin.&lt;/p&gt;

&lt;p&gt;**I assume you know what &lt;a href=&#34;http://gruntjs.com/getting-started&#34;&gt;Grunt.js&lt;/a&gt; is. I also assume you understand how to configure and manage a basic &lt;a href=&#34;http://gruntjs.com/getting-started#the-gruntfile&#34;&gt;Gruntfile&lt;/a&gt; and that you know how to use &lt;a href=&#34;https://www.npmjs.org/&#34;&gt;NPM&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&#34;video-demo&#34;&gt;Video Demo&lt;/h2&gt;

&lt;p&gt;Here is a quick video demo (no sound) of &lt;a href=&#34;https://www.npmjs.org/package/grunt-tenon-client&#34;&gt;Grunt Tenon Client&lt;/a&gt; in action. In this video I am running Grunt and then making edits to an html file that has accessibility issues in the page so we can see the Tenon catch them.&lt;/p&gt;

&lt;iframe class=&#34;tscplayer_inline embeddedObject&#34; name=&#34;tsc_player&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; type=&#34;text/html&#34; style=&#34;overflow:hidden;&#34; src=&#34;http://www.screencast.com/users/joe-watkins-emerge/folders/Snagit/media/e0ae845c-3aa4-411e-bf77-ddeaa0bfc0f9/embed&#34; height=&#34;460&#34; width=&#34;100%&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;###Step 1
&lt;strong&gt;Obtain API Key&lt;/strong&gt;
You will need to sign up for a free account at &lt;a href=&#34;http://www.tenon.io/register.php&#34;&gt;Tenon.io&lt;/a&gt;. Once your account is approved you will be given a unique API key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/s.cdpn.io/15309/tenon-account.png&#34; alt=&#34;Tenon.io Account Area&#34;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;###Step 2 - Install Plugin
From the command line run:&lt;br&gt;
&lt;code&gt;npm install grunt-tenon-client --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;###Step 3 - Configure Grunt
Add the basic task to your Gruntfile.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;tenon: {
	options: {
		key: &#39;you api key here&#39;, // ADD YOUR API KEY HERE
		filter: [31, 54], // The tID maps to the specific unique ID for the test that was failed.
		level: &#39;AA&#39; // WCAG AA OR AAA
	},
	all: {
		options: {
			saveOutputIn: &#39;allHtml.json&#39;, // output file for errors
			snippet: true, // show code snippet for errors?
			asyncLim: 2 // the maximum number of files to test in parallel. Default is 1
		},
		src: [&#39;index.html&#39;] // what file(s) to check
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure this task is part of the watch task or create a separate task to run Tenon on it&amp;rsquo;s own.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;watch: {
	html : {
		files : [&#39;**/*.html&#39;],
		tasks : [&#39;tenon&#39;]
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;full-gruntfile-js-example&#34;&gt;Full Gruntfile.js example&lt;/h3&gt;

&lt;p&gt;In this example I also am using &lt;a href=&#34;https://www.npmjs.org/package/load-grunt-tasks&#34;&gt;load-grunt-tasks&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.org/package/grunt-contrib-watch&#34;&gt;grunt-contrib-watch&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;

module.exports = function (grunt) {

	// Load grunt tasks automatically
	require(&#39;load-grunt-tasks&#39;)(grunt);

	grunt.initConfig({

		watch: {
			html : {
				files : [&#39;**/*.html&#39;],
				tasks : [&#39;tenon&#39;]
			}
		}, // watch

		tenon: {
			options: {
				key: &#39;you api key here&#39;,
				filter: [31, 54],
				level: &#39;AA&#39;
			},
			all: {
				options: {
					saveOutputIn: &#39;allHtml.json&#39;,
					snippet: true,
					asyncLim: 2
				},
				src: [&#39;index.html&#39;]
			}
		}

	}); // initConfig

	grunt.registerTask(&#39;default&#39;, [&amp;quot;watch&amp;quot;]);

};
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;##Step 4 - Watch for errors
After you have Grunt setup and running it is time to start testing. Make an edit to some HTML and watch the terminal for errors from Grunt Tenon Client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/s.cdpn.io/15309/tenon-errors.png&#34; alt=&#34;Grunt Tonon Client Errors&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-files&#34;&gt;Example Files&lt;/h2&gt;

&lt;p&gt;I created a project that includes starter files that you can &lt;a href=&#34;https://github.com/joe-watkins/grunt-tenon-client-starter&#34;&gt;grab from Github&lt;/a&gt;. I hope you consider integrating this tool into your workflow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Please stop using placeholders as labels!!!!</title>
      <link>/accessibility/please-stop-using-placeholders-as-labels/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/accessibility/please-stop-using-placeholders-as-labels/</guid>
      <description>

&lt;h2 id=&#34;accessibility-is-the-key&#34;&gt;Accessibility is the key :)&lt;/h2&gt;

&lt;p&gt;Accessibility is &lt;strong&gt;very&lt;/strong&gt; important to keep in mind when authoring web-based experiences.  When you use a &lt;code&gt;placeholder&lt;/code&gt; attribute on an &lt;code&gt;input&lt;/code&gt; field in place of a &lt;code&gt;label&lt;/code&gt; element you are not only misusing an attribute you could be rendering your web form unusable to many users and defying &lt;a href=&#34;http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#attr-input-placeholder&#34;&gt;a spec that clearly states&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The placeholder attribute should not be used as an alternative to a label.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.w3.org/WAI/GL/wiki/Using_@placeholder_on_input&#34;&gt;W3C&lt;/a&gt; has this to say about it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The placeholder attribute is not a substitute for the label element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;what-are-placeholders-for&#34;&gt;What are placeholders for?&lt;/h2&gt;

&lt;p&gt;The placeholder attribute represents a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. eg. &lt;em&gt;&amp;ldquo;enter your email address&amp;rdquo;&lt;/em&gt; &lt;a href=&#34;http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#attr-input-placeholder&#34;&gt;read more&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-are-labels-for&#34;&gt;What are labels for?&lt;/h2&gt;

&lt;p&gt;The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element&amp;rsquo;s labeled control, either using the for attribute, or by putting the form control inside the label element itself. &lt;a href=&#34;http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#the-label-element&#34;&gt;read more&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;in-field-labels-let-s-stop-this-too&#34;&gt;In-field labels.. let&amp;rsquo;s stop this too!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/s.cdpn.io/15309/in-field-example-2.png&#34; alt=&#34;In-field example&#34;&gt;&lt;/p&gt;

&lt;p&gt;The &amp;lsquo;classic&amp;rsquo; in-field label is something we should also try stray from using as well. An exception to this may be if the form consists of one or two fields eg. search/log in forms. Through usability testing folks are finding these types of forms are unusable,.. especially on a mobile device. The vertical space you are saving is not worth losing a conversion or excluding a user that requires your form to be accessible.&lt;/p&gt;

&lt;h2 id=&#34;why-do-we-see-this-pattern&#34;&gt;Why do we see this pattern?&lt;/h2&gt;

&lt;p&gt;I believe there are two major reasons why we are seeing placeholder misuse.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The developer sticks a &lt;code&gt;placeholder&lt;/code&gt; attribute inside the &lt;code&gt;input&lt;/code&gt; field because the browser natively handles the show/hide once the user interacts with the field. It does not take a ton of javascript to handle your labels in the same way. &lt;a href=&#34;http://codepen.io/joe-watkins/pen/misCA&#34;&gt;Here is some code&lt;/a&gt; if you need to do this :)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The developer simply does not know what the attribute is for.  There is a shortage of of quality accessibility information out there for developers and it is easy to fall into the trap mentioned in reason #1.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;placeholder-browser-support&#34;&gt;Placeholder Browser support&lt;/h2&gt;

&lt;p&gt;It is also important to know browser support for the HTML5 &lt;code&gt;placeholder&lt;/code&gt; feature. There are polyfill hacks out there for older browsers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/s.cdpn.io/15309/browser-support.png&#34; alt=&#34;Placeholder browser support from can i use&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;helpers&#34;&gt;Helpers&lt;/h2&gt;

&lt;p&gt;Below you will find a couple pens I came up with that you might find useful.&lt;/p&gt;

&lt;h3 id=&#34;proper-label-placeholder-usage&#34;&gt;Proper Label / Placeholder usage&lt;/h3&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;0&#34; data-slug-hash=&#34;adfzl&#34; data-default-tab=&#34;result&#34; data-user=&#34;joe-watkins&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/joe-watkins/pen/adfzl/&#39;&gt;Labels/Placeholder example&lt;/a&gt; by Joe Watkins (&lt;a href=&#39;http://codepen.io/joe-watkins&#39;&gt;@joe-watkins&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;hide-in-field-labels-with-jquery&#34;&gt;Hide in-field Labels with jQuery&lt;/h3&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;0&#34; data-slug-hash=&#34;misCA&#34; data-default-tab=&#34;result&#34; data-user=&#34;joe-watkins&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/joe-watkins/pen/misCA/&#39;&gt;Compact Labels&lt;/a&gt; by Joe Watkins (&lt;a href=&#39;http://codepen.io/joe-watkins&#39;&gt;@joe-watkins&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;show-placeholder-values-while-typing&#34;&gt;Show placeholder values while typing&lt;/h3&gt;

&lt;p&gt;&lt;p data-height=&#34;386&#34; data-theme-id=&#34;0&#34; data-slug-hash=&#34;kspFj&#34; data-default-tab=&#34;result&#34; data-user=&#34;joe-watkins&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/joe-watkins/pen/kspFj/&#39;&gt;Show placeholder while typing&lt;/a&gt; by Joe Watkins (&lt;a href=&#39;http://codepen.io/joe-watkins&#39;&gt;@joe-watkins&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Creating web-based projects that are accessible can be tough and there is still a lot to learn for us all. When it comes to an attribute like &lt;code&gt;placeholder&lt;/code&gt; it is a cool feature that can add accessibility if used correctly,.. if misused it has quite the opposite effect.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webaim.org&#34;&gt;WebAim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://a11yproject.com&#34;&gt;a11y-project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/WAI/GL/wiki/Using_@placeholder_on_input&#34;&gt;W3C Placeholder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>